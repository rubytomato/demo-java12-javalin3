/*
 * This file is generated by jOOQ.
 */
package com.example.demo.model.tables;


import com.example.demo.converter.Prefecture;
import com.example.demo.converter.PrefectureConverter;
import com.example.demo.converter.Sex;
import com.example.demo.converter.SexConverter;
import com.example.demo.model.Indexes;
import com.example.demo.model.Keys;
import com.example.demo.model.SampleDb;
import com.example.demo.model.tables.records.UserRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * ユーザーテーブル
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class User extends TableImpl<UserRecord> {

    private static final long serialVersionUID = -1146757532;

    /**
     * The reference instance of <code>sample_db.user</code>
     */
    public static final User USER = new User();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserRecord> getRecordType() {
        return UserRecord.class;
    }

    /**
     * The column <code>sample_db.user.id</code>. ユーザーID
     */
    public final TableField<UserRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "ユーザーID");

    /**
     * The column <code>sample_db.user.nick_name</code>. ニックネーム
     */
    public final TableField<UserRecord, String> NICK_NAME = createField("nick_name", org.jooq.impl.SQLDataType.VARCHAR(60).nullable(false), this, "ニックネーム");

    /**
     * The column <code>sample_db.user.sex</code>. 性別 M:男性 F:女性
     */
    public final TableField<UserRecord, Sex> SEX = createField("sex", org.jooq.impl.SQLDataType.CHAR(1).nullable(false), this, "性別 M:男性 F:女性", new SexConverter());

    /**
     * The column <code>sample_db.user.prefecture_id</code>. 都道府県 0:不明、1:北海道 - 8:九州・沖縄
     */
    public final TableField<UserRecord, Prefecture> PREFECTURE_ID = createField("prefecture_id", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.inline("0", org.jooq.impl.SQLDataType.TINYINT)), this, "都道府県 0:不明、1:北海道 - 8:九州・沖縄", new PrefectureConverter());

    /**
     * The column <code>sample_db.user.email</code>. メールアドレス
     */
    public final TableField<UserRecord, String> EMAIL = createField("email", org.jooq.impl.SQLDataType.VARCHAR(120), this, "メールアドレス");

    /**
     * The column <code>sample_db.user.memo</code>. 備考欄
     */
    public final TableField<UserRecord, String> MEMO = createField("memo", org.jooq.impl.SQLDataType.CLOB, this, "備考欄");

    /**
     * The column <code>sample_db.user.create_at</code>.
     */
    public final TableField<UserRecord, LocalDateTime> CREATE_AT = createField("create_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>sample_db.user.update_at</code>.
     */
    public final TableField<UserRecord, LocalDateTime> UPDATE_AT = createField("update_at", org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("CURRENT_TIMESTAMP", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>sample_db.user</code> table reference
     */
    public User() {
        this(DSL.name("user"), null);
    }

    /**
     * Create an aliased <code>sample_db.user</code> table reference
     */
    public User(String alias) {
        this(DSL.name(alias), USER);
    }

    /**
     * Create an aliased <code>sample_db.user</code> table reference
     */
    public User(Name alias) {
        this(alias, USER);
    }

    private User(Name alias, Table<UserRecord> aliased) {
        this(alias, aliased, null);
    }

    private User(Name alias, Table<UserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("ユーザーテーブル"));
    }

    public <O extends Record> User(Table<O> child, ForeignKey<O, UserRecord> key) {
        super(child, key, USER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return SampleDb.SAMPLE_DB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.USER_IDX_PREF, Indexes.USER_IDX_SEX, Indexes.USER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<UserRecord, Long> getIdentity() {
        return Keys.IDENTITY_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<UserRecord> getPrimaryKey() {
        return Keys.KEY_USER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<UserRecord>> getKeys() {
        return Arrays.<UniqueKey<UserRecord>>asList(Keys.KEY_USER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public User as(String alias) {
        return new User(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public User as(Name alias) {
        return new User(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public User rename(String name) {
        return new User(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public User rename(Name name) {
        return new User(name, null);
    }
}
